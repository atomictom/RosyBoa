Function :: Identifier Identifier* = Expr
Expr :: Lambda Expr* | Term ([+-] Expr)* | Case
Term :: Factor ([*/] Term)*
Factor :: (Expr) | Literal
Lambda :: \Identifier* -> Expr
Case :: case Expr of [Matcher -> Expr]*
Matcher :: _ | Expr
Identifier :: [a-zA-z_][a-zA-Z0-9_]*
Literal :: Integer | Char | Float
Integer :: Hexadecimal | Decimal | Octal | Binary
Char :: '[a-zA-Z0-9:graph:]'
Float :: [0-9]+.[0-9]*(e[0-9]+)?
Decimal :: 0 | [1-9][0-9]*
Hexadecimal :: 0x[A-Fa-f0-9]+
Octal :: 0[0-7]+
Binary :: 0b[01]+
Comment :: -- .* \n | {- .*? -}

test = (\x -> x + 1) 5 // 6

// Function :: Identifier Identifier* = Expr
Expr :: Lambda Expr* | Term ([+-] Expr)* | Out
Lambda :: \Identifier* -> Expr
// Case :: case Expr of [Matcher -> Expr]*
// Matcher :: _ | Expr
Out :: out Expr
Literal :: Integer | Char | Float

Expr :: Term [+|- Term] | Out
Term :: Factor [*|- Factor]
Factor :: Float | Integer | [+|-] Factor | (Expr)

Identifier :: [a-zA-z_][a-zA-Z0-9_]*
Float :: [0-9]*.?[0-9]*(e[0-9]+)?
Integer :: (-)? (Hexadecimal | Decimal | Octal | Binary)
Char :: '[:graph:] | Escape'
Escape :: \t | \n | \r | \\
Decimal :: 0 | [1-9][0-9]*
Hexadecimal :: 0x[A-Fa-f0-9]+
Octal :: 0[oO][0-7]+
Binary :: 0b[01]+
Comment :: -- .* \n | {- .*? -}

test = (\x -> x + 1) 5 // 6

Expr :: Expr [+|- Term] | Term
Term :: Term [*|- Factor] | Factor
Factor :: Float | Integer | [+|-] Factor | (Expr)

